/**
 * Extend the base Actor document by defining a custom roll data structure which is ideal for the Simple system.
 * @extends {Actor}
 */
export class loreActor extends Actor {
  /** @override */
  prepareData() {
    // Prepare data for the actor. Calling the super version of this executes
    // the following, in order: data reset (to clear active effects),
    // prepareBaseData(), prepareEmbeddedDocuments() (including active effects),
    // prepareDerivedData().
    super.prepareData();
  }

  /** @override */
  async _preUpdate(changed, options, userId) {
    // If wounds are changing, automatically toggle unconscious when reaching max
    try {
      const hasWoundsUpdate = foundry.utils.hasProperty(
        changed,
        'system.wounds.value'
      );
      const hasFatigueUpdate = foundry.utils.hasProperty(
        changed,
        'system.fatigue.value'
      );
      if (hasWoundsUpdate) {
        const newWounds = Number(
          foundry.utils.getProperty(changed, 'system.wounds.value')
        );
        // Fall back to current if new value is not a number (shouldn't happen, but be safe)
        const targetWounds = Number.isFinite(newWounds)
          ? newWounds
          : Number(this.system?.wounds?.value ?? 0);
        const maxWounds = Number(this.system?.wounds?.max ?? 3);
        // Only auto-SET unconscious when reaching/exceeding max; never auto-clear.
        // Also, if this same update explicitly sets system.unconscious, respect that.
        const explicitUncChange = foundry.utils.hasProperty(changed, 'system.unconscious');
        if (!explicitUncChange && targetWounds >= maxWounds && !this.system?.unconscious) {
          foundry.utils.setProperty(changed, 'system.unconscious', true);
        }
      }

      // If fatigue is changing, automatically set incapacitated when reaching max; never auto-clear.
      if (hasFatigueUpdate) {
        const newFatigue = Number(
          foundry.utils.getProperty(changed, 'system.fatigue.value')
        );
        const targetFatigue = Number.isFinite(newFatigue)
          ? newFatigue
          : Number(this.system?.fatigue?.value ?? 0);
        const maxFatigue = Number(this.system?.fatigue?.max ?? 3);
        const explicitIncChange = foundry.utils.hasProperty(changed, 'system.incapacitated');
        if (!explicitIncChange && targetFatigue >= maxFatigue && !this.system?.incapacitated) {
          foundry.utils.setProperty(changed, 'system.incapacitated', true);
        }
      }
    } catch (err) {
      console.warn('LORE: Failed to auto-toggle unconscious on wounds change', err);
    }
    return super._preUpdate(changed, options, userId);
  }

  /** @override */
  prepareBaseData() {
    // Data modifications in this step occur before processing embedded
    // documents or derived data.
  }

  /**
   * @override
   * Augment the actor source data with additional dynamic data that isn't
   * handled by the actor's DataModel. Data calculated in this step should be
   * available both inside and outside of character sheets (such as if an actor
   * is queried and has a roll executed directly from it).
   */
  prepareDerivedData() {
  super.prepareDerivedData();
  const actorData = this;
  const flags = actorData.flags.lore || {};
  }

  /**
   *
   * @override
   * Augment the actor's default getRollData() method by appending the data object
   * generated by the its DataModel's getRollData(), or null. This polymorphic
   * approach is useful when you have actors & items that share a parent Document,
   * but have slightly different data preparation needs.
   */
  getRollData() {
    return { ...super.getRollData(), ...(this.system.getRollData?.() ?? null) };
  }
}
